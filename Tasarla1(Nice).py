# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Tasarim1.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.pyplot as plt
import numpy as np
from PyQt5.QtWidgets import *
import pandas as pd
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QTableWidget, QTableWidgetItem, QComboBox,QLineEdit
from PyQt5.QtCore import Qt, QThread, pyqtSignal
import subprocess
from PyQt5 import QtCore, QtGui, QtWidgets
from FunctionsForInterfaceQt5 import plotGraph

from FunctionsForInterfaceQt5 import plotGraph

class Ui_mainWindow(object):
    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(1118, 850)
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.DataTable = QtWidgets.QTableWidget(self.centralwidget)
        self.DataTable.setGeometry(QtCore.QRect(50, 50, 661, 471))
        self.DataTable.setObjectName("DataTable")
        self.DataTable.setColumnCount(5)
        self.DataTable.setRowCount(1)

        #item = QtWidgets.QTableWidgetItem()
        #self.DataTable.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DataTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DataTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DataTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DataTable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DataTable.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()


        item.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled)
        self.DataTable.setItem(0, 0, item)
        self.Add_Line = QtWidgets.QPushButton(self.centralwidget)
        self.Add_Line.setGeometry(QtCore.QRect(740, 90, 93, 28))
        self.Add_Line.setObjectName("Add_Line")

        self.Show_Graph = QtWidgets.QPushButton(self.centralwidget)
        self.Show_Graph.setGeometry(QtCore.QRect(740, 490, 93, 28))
        self.Show_Graph.setObjectName("Show_Graph")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(60, 570, 651, 231))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setMouseTracking(True)
        self.label.setScaledContents(True)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")

        # Create a layout for the Matplotlib figure
        self.graphLayout = QVBoxLayout()
        self.graphLayout.addWidget(self.label)

        # Create a Matplotlib figure canvas
        self.figureCanvas = FigureCanvas(plt.Figure())
        self.graphLayout.addWidget(self.figureCanvas)

        mainWindow.setCentralWidget(self.centralwidget)

        mainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(mainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1118, 26))
        self.menubar.setObjectName("menubar")
        mainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

        self.Add_Line.clicked.connect(self.addLine)

        self.Show_Graph.clicked.connect(self.showGraph)
        # Create a shortcut for Ctrl+Delete
        self.deleteShortcut = QShortcut(QtGui.QKeySequence(QtCore.Qt.CTRL + QtCore.Qt.Key_Delete), self.DataTable)
        self.deleteShortcut.activated.connect(self.deleteLine)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "MainWindow"))
        #item = self.DataTable.verticalHeaderItem(0)
        #item.setText(_translate("mainWindow", "1"))
        item = self.DataTable.horizontalHeaderItem(0)
        item.setText(_translate("mainWindow", "Material"))
        item = self.DataTable.horizontalHeaderItem(1)
        item.setText(_translate("mainWindow", "Thickness"))
        item = self.DataTable.horizontalHeaderItem(2)
        item.setText(_translate("mainWindow", "Wavelength >"))
        item = self.DataTable.horizontalHeaderItem(3)
        item.setText(_translate("mainWindow", "Wavelength <"))
        item = self.DataTable.horizontalHeaderItem(4)
        item.setText(_translate("mainWindow", "Angle"))
        self.Add_Line.setText(_translate("mainWindow", "Add Line"))
        self.Add_Line.setShortcut(_translate("mainWindow", "Ctrl+A"))
        self.Show_Graph.setText(_translate("mainWindow", "Show Graph"))
        self.Show_Graph.setShortcut(_translate("mainWindow", "Ctrl+G"))
        self.label.setText(_translate("mainWindow", "TextLabel"))


    def update(self):
        self.label.adjustSize()

    def addLine(self):
        # Get the current row count
        rowCount = self.DataTable.rowCount()
        # Insert a new row at the end
        self.DataTable.insertRow(rowCount)
        #items = ["Choose element","M1", "M2", "M3"]

    def deleteLine(self):
        # Get the currently selected row
        selected_row = self.DataTable.currentRow()

        # Check if any row is selected
        if selected_row != -1:
            # Remove the selected row
            self.DataTable.removeRow(selected_row)
            self.update()


    def showGraph(self):
        try:
            # Get the data from the table and convert it into a pandas DataFrame
            table_data = []
            for row in range(self.DataTable.rowCount()):
                row_data = []
                for col in range(self.DataTable.columnCount()):
                    try:
                        item = self.DataTable.item(row, col)
                        if item is not None:
                            row_data.append(item.text())
                        else:
                            cell_widget = self.DataTable.cellWidget(row, col)
                            if isinstance(cell_widget, QComboBox):
                                row_data.append(cell_widget.currentText())
                            elif isinstance(cell_widget, QLineEdit):
                                row_data.append(cell_widget.text())
                    except Exception as e:
                        row_data.append(None)
                        print(f"Error reading cell at row {row}, column {col}: {str(e)}")
                table_data.append(row_data)

            column_headers = [self.DataTable.horizontalHeaderItem(col).text() for col in
                              range(self.DataTable.columnCount())]
            df = pd.DataFrame(table_data, columns=column_headers)

            # Display the DataFrame (you can replace this with your actual graphing code)
            print(df)

            # Plot the graph and update the figure canvas
            fig = plotGraph(df)
            self.figureCanvas.figure = fig
            self.figureCanvas.draw()
            #lamda = np.arange(float(df["Wavelength >"][0]), float(df["Wavelength <"][0]))
            plotGraph(df)
            #print(lamda)
            return df

        except Exception as e:
            print(e)
            #print(f"An error occurred: {str(e)}")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_mainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())

